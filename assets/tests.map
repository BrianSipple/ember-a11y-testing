{"version":3,"sources":["dummy/tests/acceptance/auto-run-test.js","dummy/tests/acceptance/auto-run-test.jshint.js","dummy/tests/acceptance/violations-test.js","dummy/tests/acceptance/violations-test.jshint.js","dummy/tests/app.jshint.js","dummy/tests/components/page-title.jshint.js","dummy/tests/components/passing-component.jshint.js","dummy/tests/components/violations-grid-item.jshint.js","dummy/tests/components/x-button.jshint.js","dummy/tests/components/x-div.jshint.js","dummy/tests/components/x-image.jshint.js","dummy/tests/components/x-paragraph.jshint.js","dummy/tests/components/x-text-input.jshint.js","dummy/tests/helpers/destroy-app.js","dummy/tests/helpers/destroy-app.jshint.js","dummy/tests/helpers/module-for-acceptance.js","dummy/tests/helpers/module-for-acceptance.jshint.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/resolver.jshint.js","dummy/tests/helpers/start-app.js","dummy/tests/helpers/start-app.jshint.js","dummy/tests/initializers/component-data-attributes.jshint.js","dummy/tests/resolver.jshint.js","dummy/tests/router.jshint.js","dummy/tests/routes/index.jshint.js","dummy/tests/routes/violations.jshint.js","dummy/tests/test-helper.js","dummy/tests/test-helper.jshint.js","dummy/tests/transitions.jshint.js","dummy/tests/unit/instance-initializers/axe-component-test.js","dummy/tests/unit/instance-initializers/axe-component-test.jshint.js","dummy/tests/unit/test-body-footer-test.js","dummy/tests/unit/test-body-footer-test.jshint.js","dummy/tests/unit/utils/is-background-replaced-element-test.js","dummy/tests/unit/utils/is-background-replaced-element-test.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('dummy/tests/acceptance/auto-run-test', ['exports', 'ember', 'qunit', 'dummy/tests/helpers/start-app', 'sinon'], function (exports, _ember, _qunit, _dummyTestsHelpersStartApp, _sinon) {\n  var run = _ember['default'].run;\n\n  var SELECTORS = {\n    passingComponent: '[data-test-selector=\"violations-page__passing-component\"]'\n  };\n\n  var application = undefined;\n  var sandbox = undefined;\n\n  (0, _qunit.module)('Acceptance | auto-run', {\n    beforeEach: function beforeEach() {\n      application = (0, _dummyTestsHelpersStartApp['default'])();\n      sandbox = _sinon['default'].sandbox.create();\n    },\n\n    afterEach: function afterEach() {\n      sandbox.restore();\n      _ember['default'].run(application, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)('should run the function when visiting a new route', function (assert) {\n    var callbackStub = sandbox.stub(run.backburner.options.render, 'after');\n\n    visit('/');\n\n    andThen(function () {\n      assert.ok(callbackStub.calledOnce);\n      assert.equal(currentPath(), 'violations');\n    });\n  });\n\n  (0, _qunit.test)('should run the function whenever a render occurs', function (assert) {\n    var callbackStub = sandbox.stub(run.backburner.options.render, 'after');\n\n    visit('/').then(function () {\n\n      assert.ok(callbackStub.calledOnce);\n      assert.equal(currentPath(), 'violations');\n\n      click('' + SELECTORS.passingComponent);\n\n      andThen(function () {\n        assert.ok(callbackStub.calledTwice);\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/auto-run-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | acceptance/auto-run-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/auto-run-test.js should pass jshint.');\n  });\n});","define('dummy/tests/acceptance/violations-test', ['exports', 'qunit', 'dummy/tests/helpers/module-for-acceptance', 'sinon'], function (exports, _qunit, _dummyTestsHelpersModuleForAcceptance, _sinon) {\n\n  /*\n   * Violation selectors reported by axe in its violations results\n   * 🔊 NOTE: These are deliberatly sorted A-Z, as haven't yet figured out\n   * where axes gets its ordering from (it doesn't appear to be DOM order)\n   */\n  var VIOLATION_SELECTORS = [\"#violations__empty-button\", \"#violations__img-without-alt\", \"#violations__labeless-input\", \"#violations__low-contrast-text\", \"#violations__non-standard-html > blink\", \"#violations__radio-group-items--strawberries\"];\n\n  var actual = undefined,\n      expected = undefined,\n      sandbox = undefined;\n\n  (0, _dummyTestsHelpersModuleForAcceptance['default'])('Acceptance | violations', {\n    beforeEach: function beforeEach() {\n      sandbox = _sinon['default'].sandbox.create();\n    },\n\n    afterEach: function afterEach() {\n      sandbox.restore();\n    }\n  });\n\n  (0, _qunit.test)('marking DOM nodes with violations', function (assert) {\n\n    sandbox.stub(axe.ember, 'a11yCheckCallback', function (results) {\n      expected = VIOLATION_SELECTORS.length;\n      actual = results.violations.length;\n\n      assert.equal(actual, expected);\n\n      expected = VIOLATION_SELECTORS;\n      actual = results.violations.map(function (violation) {\n        return violation.nodes;\n      }).map(function (node) {\n        return node[0].target[0];\n      }).sort(function (a, b) {\n        // descending (A-Z) order (NOTE: We need explicit numeric returns here to please Phantom (https://github.com/ariya/phantomjs/issues/11090)\n        if (a < b) {\n          return -1;\n        } else if (a > b) {\n          return 1;\n        }\n\n        return 0;\n      });\n\n      assert.deepEqual(actual, expected);\n    });\n\n    visit('/');\n  });\n});","define('dummy/tests/acceptance/violations-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | acceptance/violations-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/violations-test.js should pass jshint.');\n  });\n});","define('dummy/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('dummy/tests/components/page-title.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/page-title.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/page-title.js should pass jshint.');\n  });\n});","define('dummy/tests/components/passing-component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/passing-component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/passing-component.js should pass jshint.');\n  });\n});","define('dummy/tests/components/violations-grid-item.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/violations-grid-item.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/violations-grid-item.js should pass jshint.');\n  });\n});","define('dummy/tests/components/x-button.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/x-button.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-button.js should pass jshint.');\n  });\n});","define('dummy/tests/components/x-div.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/x-div.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-div.js should pass jshint.');\n  });\n});","define('dummy/tests/components/x-image.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/x-image.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-image.js should pass jshint.');\n  });\n});","define('dummy/tests/components/x-paragraph.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/x-paragraph.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-paragraph.js should pass jshint.');\n  });\n});","define('dummy/tests/components/x-text-input.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/x-text-input.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-text-input.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('dummy/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _dummyTestsHelpersStartApp, _dummyTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _dummyTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _dummyTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('dummy/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/resolver', ['exports', 'dummy/resolver', 'dummy/config/environment'], function (exports, _dummyResolver, _dummyConfigEnvironment) {\n\n  var resolver = _dummyResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _dummyConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _dummyConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('dummy/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/app', 'dummy/config/environment'], function (exports, _ember, _dummyApp, _dummyConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _dummyConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _dummyApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('dummy/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('dummy/tests/initializers/component-data-attributes.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | initializers/component-data-attributes.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'initializers/component-data-attributes.js should pass jshint.');\n  });\n});","define('dummy/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('dummy/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/violations.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/violations.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/violations.js should pass jshint.');\n  });\n});","define('dummy/tests/test-helper', ['exports', 'dummy/tests/helpers/resolver', 'ember-qunit'], function (exports, _dummyTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_dummyTestsHelpersResolver['default']);\n});","define('dummy/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('dummy/tests/transitions.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | transitions.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transitions.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/instance-initializers/axe-component-test', ['exports', 'ember', 'dummy/instance-initializers/axe-component', 'qunit'], function (exports, _ember, _dummyInstanceInitializersAxeComponent, _qunit) {\n  var Application = _ember['default'].Application;\n  var Component = _ember['default'].Component;\n  var Logger = _ember['default'].Logger;\n  var run = _ember['default'].run;\n\n  var ID_TEST_DOM_NODE = 'sign-up-button';\n\n  var VIOLATION_CLASS__LEVEL_1 = 'axe-violation--level-1';\n  var VIOLATION_CLASS__LEVEL_2 = 'axe-violation--level-2';\n  var VIOLATION_CLASS__LEVEL_3 = 'axe-violation--level-3';\n  var VIOLATION_CLASS__REPLACED = 'axe-violation--replaced-element';\n\n  /*\n   * Mapping of violation class names to their corresponding `visualNoiseLevel`\n   */\n  var VIOLATION_CLASS_MAP = {\n    LEVEL_1: VIOLATION_CLASS__LEVEL_1,\n    LEVEL_2: VIOLATION_CLASS__LEVEL_2,\n    LEVEL_3: VIOLATION_CLASS__LEVEL_3,\n    REPLACED_ELEMENT: VIOLATION_CLASS__REPLACED\n  };\n\n  var application = undefined;\n  var sandbox = undefined;\n\n  function setupDOMNode() {\n    var id = arguments.length <= 0 || arguments[0] === undefined ? ID_TEST_DOM_NODE : arguments[0];\n    var tagName = arguments.length <= 1 || arguments[1] === undefined ? 'div' : arguments[1];\n\n    var node = document.createElement(tagName);\n\n    node.setAttribute('id', id);\n    document.body.appendChild(node);\n\n    return node;\n  }\n\n  function stubA11yCheck(sandbox, callbackPayload) {\n    sandbox.stub(axe, 'a11yCheck', function (el, options, callback) {\n      callback(callbackPayload);\n    });\n  }\n\n  function stubViolationOnDOMNode(sandbox, selector) {\n    stubA11yCheck(sandbox, {\n      violations: [{\n        name: 'test',\n        nodes: [{ target: [selector] }]\n      }]\n    });\n  }\n\n  (0, _qunit.module)('Unit | Instance Initializer | axe-component', {\n    beforeEach: function beforeEach() {\n      run(function () {\n        application = Application.create({\n          rootElement: '#ember-testing'\n        });\n        application.deferReadiness();\n      });\n\n      sandbox = sinon.sandbox.create();\n    },\n\n    afterEach: function afterEach() {\n      sandbox.restore();\n    }\n  });\n\n  /* Basic Behavior */\n\n  (0, _qunit.test)('initializer should not re-open Component more than once', function (assert) {\n    // Depending on if the initializer has already ran, we will either expect the\n    // reopen method to be called once or not at all.\n    var assertMethod = Component.prototype.audit ? 'notCalled' : 'calledOnce';\n    var reopenSpy = sandbox.spy(Component, 'reopen');\n\n    (0, _dummyInstanceInitializersAxeComponent.initialize)(application);\n    (0, _dummyInstanceInitializersAxeComponent.initialize)(application);\n\n    assert.ok(reopenSpy[assertMethod]);\n  });\n\n  (0, _qunit.test)('audit is run on didRender when not in testing mode', function (assert) {\n    (0, _dummyInstanceInitializersAxeComponent.initialize)(application);\n\n    var component = Component.create({});\n    var auditSpy = sandbox.spy(component, 'audit');\n\n    // In order for the audit to run, we have to act like we're not in testing\n    _ember['default'].testing = false;\n\n    run(function () {\n      return component.appendTo('#ember-testing');\n    });\n    assert.ok(auditSpy.calledOnce);\n\n    run(function () {\n      return component.trigger('didRender');\n    });\n    assert.ok(auditSpy.calledTwice);\n\n    run(function () {\n      return component.destroy();\n    });\n\n    // Turn testing mode back on to ensure validity of other tests\n    _ember['default'].testing = true;\n  });\n\n  (0, _qunit.test)('audit is not run on didRender when in testing mode', function (assert) {\n    (0, _dummyInstanceInitializersAxeComponent.initialize)(application);\n\n    var component = Component.create({});\n    var auditSpy = sandbox.spy(component, 'audit');\n\n    run(function () {\n      return component.appendTo('#ember-testing');\n    });\n    assert.ok(auditSpy.notCalled);\n\n    run(function () {\n      return component.destroy();\n    });\n  });\n\n  /* Component.turnAuditOff */\n\n  (0, _qunit.test)('turnAuditOff prevents audit from running on didRender', function (assert) {\n    (0, _dummyInstanceInitializersAxeComponent.initialize)(application);\n\n    var component = Component.create({ turnAuditOff: true });\n    var auditSpy = sandbox.spy(component, 'audit');\n\n    // In order for the audit to run, we have to act like we're not in testing\n    _ember['default'].testing = false;\n\n    run(function () {\n      return component.appendTo('#ember-testing');\n    });\n    assert.ok(auditSpy.notCalled);\n\n    run(function () {\n      return component.destroy();\n    });\n\n    // Turn testing mode back on to ensure validity of other tests\n    _ember['default'].testing = true;\n  });\n\n  /* Component.audit */\n\n  (0, _qunit.test)('audit should log any violations found', function (assert) {\n    stubA11yCheck(sandbox, {\n      violations: [{\n        name: 'test',\n        nodes: []\n      }]\n    });\n\n    var logSpy = sandbox.spy(Logger, 'error');\n    var component = Component.create({});\n\n    component.audit();\n\n    assert.ok(logSpy.calledOnce);\n  });\n\n  (0, _qunit.test)('audit should do nothing if no violations found', function (assert) {\n    stubA11yCheck(sandbox, { violations: [] });\n\n    var logSpy = sandbox.spy(Logger, 'error');\n    var component = Component.create({});\n\n    component.audit();\n\n    assert.ok(logSpy.notCalled);\n  });\n\n  /* Component.axeCallback */\n\n  (0, _qunit.test)('axeCallback receives the results of the audit', function (assert) {\n    var results = { violations: [] };\n    var axeCallbackSpy = sandbox.spy();\n    var component = Component.create({\n      axeCallback: axeCallbackSpy\n    });\n\n    stubA11yCheck(sandbox, results);\n    component.audit();\n\n    assert.ok(axeCallbackSpy.calledOnce);\n    assert.ok(axeCallbackSpy.calledWith(results));\n  });\n\n  (0, _qunit.test)('axeCallback throws an error if it is not a function', function (assert) {\n    var results = { violations: [] };\n\n    stubA11yCheck(sandbox, results);\n\n    var component = Component.create({\n      axeCallback: 'axeCallbackSpy'\n    });\n\n    assert.throws(function () {\n      return component.audit();\n    }, 'axeCallback should be a function.');\n  });\n\n  /* Component.axeOptions */\n\n  (0, _qunit.test)('axeOptions are passed in as the second param to a11yCheck', function (assert) {\n    var a11yCheckStub = sandbox.stub(axe, 'a11yCheck');\n\n    var axeOptions = { test: 'test' };\n    var component = Component.create({ axeOptions: axeOptions });\n    component.audit();\n\n    assert.ok(a11yCheckStub.calledOnce);\n    assert.ok(a11yCheckStub.calledWith(component.$(), axeOptions));\n  });\n\n  (0, _qunit.test)('#violationClasses is computed from the current `visualNoiseLevel`', function (assert) {\n    (0, _dummyInstanceInitializersAxeComponent.initialize)(application);\n\n    stubViolationOnDOMNode(sandbox, '#' + ID_TEST_DOM_NODE);\n\n    var dummyDOMNode = setupDOMNode(ID_TEST_DOM_NODE);\n    var component = Component.create();\n\n    [1, 2, 3].forEach(function (currentNoiseLevel) {\n      run(function () {\n        component.set('visualNoiseLevel', currentNoiseLevel);\n      });\n\n      component.audit();\n\n      [1, 2, 3].forEach(function (_noiseLevel) {\n        var assertFunc = _noiseLevel === currentNoiseLevel ? 'ok' : 'notOk';\n        assert[assertFunc](dummyDOMNode.classList.contains(VIOLATION_CLASS_MAP['LEVEL_' + _noiseLevel], 'assert ' + assertFunc + ' for level ' + _noiseLevel));\n      });\n    });\n\n    run(function () {\n      return dummyDOMNode.remove();\n    });\n  });\n\n  (0, _qunit.test)('`axeViolationClassNames` can be passed as a space-separated string (to aid template usage)', function (assert) {\n    stubViolationOnDOMNode(sandbox, '#' + ID_TEST_DOM_NODE);\n\n    var dummyDOMNode = setupDOMNode(ID_TEST_DOM_NODE);\n    var component = Component.create({\n      axeViolationClassNames: 'spark 🐋   foo  '\n    });\n\n    component.audit();\n\n    assert.deepEqual([].slice.call(dummyDOMNode.classList), ['spark', '🐋', 'foo']);\n\n    run(function () {\n      return dummyDOMNode.remove();\n    });\n  });\n\n  (0, _qunit.test)('#violationClasses will always give precedence to a `axeViolationClassNames`, if it is set', function (assert) {\n    stubViolationOnDOMNode(sandbox, '#' + ID_TEST_DOM_NODE);\n\n    var dummyDOMNode = setupDOMNode(ID_TEST_DOM_NODE);\n    var axeViolationClassNames = ['a11y-tomster', 'a11y-zoey'];\n\n    var component = Component.create({ axeViolationClassNames: axeViolationClassNames });\n\n    component.audit();\n\n    axeViolationClassNames.forEach(function (className) {\n      assert.ok(dummyDOMNode.classList.contains(className));\n    });\n\n    [1, 2, 3].forEach(function (noiseLevel) {\n      assert.notOk(dummyDOMNode.classList.contains(VIOLATION_CLASS_MAP['LEVEL_' + noiseLevel]));\n    });\n\n    run(function () {\n      return dummyDOMNode.remove();\n    });\n  });\n\n  (0, _qunit.test)('using default class names for violations when no `axeViolationClassNames` is provided', function (assert) {\n    stubViolationOnDOMNode(sandbox, '#' + ID_TEST_DOM_NODE);\n\n    var dummyDOMNode = setupDOMNode(ID_TEST_DOM_NODE);\n    var component = Component.create();\n\n    component.audit();\n\n    assert.ok(dummyDOMNode.classList.contains(VIOLATION_CLASS_MAP.LEVEL_1));\n\n    run(function () {\n      return dummyDOMNode.remove();\n    });\n  });\n\n  (0, _qunit.test)('smartly detects replaced elements and applies a special `border-box` style instead\\nof the styles from the current setting', function (assert) {\n    stubViolationOnDOMNode(sandbox, '#' + ID_TEST_DOM_NODE);\n\n    var customViolationClass = 'foo';\n    var dummyDOMNode = setupDOMNode(ID_TEST_DOM_NODE, 'img');\n    var component = Component.create({ axeViolationClassNames: [customViolationClass] });\n\n    component.audit();\n    assert.ok(dummyDOMNode.classList.contains(VIOLATION_CLASS_MAP.REPLACED_ELEMENT));\n    assert.notOk(dummyDOMNode.classList.contains(customViolationClass));\n  });\n});\n/* global sinon, axe */","define('dummy/tests/unit/instance-initializers/axe-component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/instance-initializers/axe-component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/instance-initializers/axe-component-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/test-body-footer-test', ['exports', 'ember', 'qunit', 'sinon'], function (exports, _ember, _qunit, _sinon) {\n\n  var sandbox = undefined;\n\n  (0, _qunit.module)('Unit | test-body-footer', {\n    beforeEach: function beforeEach() {\n      sandbox = _sinon['default'].sandbox.create();\n    },\n\n    afterEach: function afterEach() {\n      sandbox.restore();\n    }\n  });\n\n  /* Registration */\n\n  (0, _qunit.test)('appropriate callback functions have been registered', function (assert) {\n    assert.ok(~QUnit.config.callbacks.done.indexOf(axe.ember.qunitDone));\n    assert.ok(~QUnit.config.callbacks.moduleStart.indexOf(axe.ember.moduleStart));\n  });\n\n  /* axe.ember.a11yCheckCallback */\n\n  (0, _qunit.test)('a11yCheckCallback shouldn\\'t log anything if no violations', function (assert) {\n    var loggerStub = sandbox.stub(_ember['default'].Logger, 'error');\n\n    axe.ember.a11yCheckCallback({ violations: [] });\n\n    assert.ok(loggerStub.notCalled);\n  });\n\n  (0, _qunit.test)('a11yCheckCallback should log any violations and throw an error', function (assert) {\n    var loggerStub = sandbox.stub(_ember['default'].Logger, 'error');\n\n    assert.throws(function () {\n      axe.ember.a11yCheckCallback({ violations: [{}, {}] });\n    }, 'The page should have no accessibility violations. Please check the developer console for more details.');\n\n    assert.equal(loggerStub.callCount, 1, 'An error is thrown when there are violations');\n  });\n\n  /* axe.ember.afterRender */\n\n  (0, _qunit.test)('afterRender should run a11yCheck and feed the results to callback', function (assert) {\n    var a11yCheckStub = sandbox.stub(axe, 'a11yCheck');\n\n    axe.ember.afterRender();\n\n    assert.ok(a11yCheckStub.calledOnce);\n    assert.ok(a11yCheckStub.calledWith('#ember-testing-container', undefined, axe.ember.a11yCheckCallback));\n  });\n\n  (0, _qunit.test)('afterRender should run a11yCheck with options and feed the results to callback', function (assert) {\n    var a11yCheckStub = sandbox.stub(axe, 'a11yCheck');\n\n    axe.ember.testOptions = {\n      runOnly: {\n        type: \"tag\",\n        values: [\"wcag2a\"]\n      }\n    };\n\n    axe.ember.afterRender();\n\n    assert.ok(a11yCheckStub.calledOnce);\n    assert.ok(a11yCheckStub.calledWith('#ember-testing-container', axe.ember.testOptions, axe.ember.a11yCheckCallback));\n\n    axe.ember.testOptions = undefined;\n  });\n\n  /* axe.ember.moduleStart */\n\n  (0, _qunit.test)('moduleStart turns axe on for acceptance tests', function (assert) {\n    var turnAxeOnStub = sandbox.stub(axe.ember, 'turnAxeOn');\n\n    axe.ember.moduleStart({ name: 'Acceptance | Some Test' });\n\n    assert.ok(turnAxeOnStub.calledOnce);\n  });\n\n  (0, _qunit.test)('moduleStart turns axe off for non-acceptance tests', function (assert) {\n    var turnAxeOffStub = sandbox.stub(axe.ember, 'turnAxeOff');\n\n    axe.ember.moduleStart({ name: 'Unit | Some Test' });\n\n    assert.ok(turnAxeOffStub.calledOnce);\n  });\n\n  /* axe.ember.qunitDone */\n\n  (0, _qunit.test)('qunitDone turns axe off', function (assert) {\n    var turnAxeOffStub = sandbox.stub(axe.ember, 'turnAxeOff');\n\n    axe.ember.qunitDone();\n\n    assert.ok(turnAxeOffStub.calledOnce);\n  });\n\n  /* axe.ember.turnAxeOn */\n\n  (0, _qunit.test)('turnAxeOn enables axe tests on afterRender and adjusts the display', function (assert) {\n    axe.ember.turnAxeOn();\n    assert.ok(document.body.classList.contains('axe-enabled'));\n    assert.ok(_ember['default'].run.backburner.options.render.after === axe.ember.afterRender);\n  });\n\n  /* axe.ember.turnAxeOff */\n  (0, _qunit.test)('turnAxeOff disables axe tests on afterRender and resets the display', function (assert) {\n    axe.ember.turnAxeOff();\n    assert.ok(!document.body.classList.contains('axe-enabled'));\n    assert.ok(_ember['default'].run.backburner.options.render.after === undefined);\n  });\n});\n/* global QUnit, axe */","define('dummy/tests/unit/test-body-footer-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/test-body-footer-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/test-body-footer-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/utils/is-background-replaced-element-test', ['exports', 'ember-a11y-testing/utils/is-background-replaced-element', 'qunit'], function (exports, _emberA11yTestingUtilsIsBackgroundReplacedElement, _qunit) {\n\n  var BACKGROUND_REPLACED_ELEMENTS = [{ tagName: 'VIDEO' }, { tagName: 'AUDIO' }, { tagName: 'OBJECT' }, { tagName: 'SOURCE' }, { tagName: 'IMG' }, { tagName: 'INPUT', type: 'radio' }, { tagName: 'INPUT', type: 'range' }];\n\n  var STANDARD_ELEMENTS = [{ tagName: 'DIV' }, { tagName: 'LI' }, { tagName: 'A' }, { tagName: 'INPUT', type: 'text' }, { tagName: 'INPUT', type: 'number' }];\n\n  function makeMessage(_ref, expected) {\n    var tagName = _ref.tagName;\n    var type = _ref.type;\n\n    return 'Element with tagName \"' + tagName + '\" ' + (type ? 'with type \"' + type + '\" ' : '') + 'evaluates to ' + expected;\n  }\n\n  var expected = undefined,\n      actual = undefined,\n      message = undefined;\n\n  (0, _qunit.module)('Unit | Utility | is replaced element');\n\n  (0, _qunit.test)('it determines whether or not an HTMLElement is of the variety that will\\nhave its background content be unstylable', function (assert) {\n\n    BACKGROUND_REPLACED_ELEMENTS.forEach(function (element) {\n      expected = true;\n      actual = (0, _emberA11yTestingUtilsIsBackgroundReplacedElement['default'])(element);\n      message = makeMessage(element, expected);\n\n      assert.equal(actual, expected, message);\n    });\n\n    STANDARD_ELEMENTS.forEach(function (element) {\n      expected = false;\n      actual = (0, _emberA11yTestingUtilsIsBackgroundReplacedElement['default'])(element);\n      message = makeMessage(element, expected);\n\n      assert.equal(actual, expected, message);\n    });\n  });\n});","define('dummy/tests/unit/utils/is-background-replaced-element-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/utils/is-background-replaced-element-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/is-background-replaced-element-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChhHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}